#! /bin/bash

#dependencies: ipcalc, iproute2, dnsmasq

# FUNCTIONs
function cleanup() {
  echo
  echo "[*] killing dnsmasq"
  kill "$(cat /var/run/dnsmasq.pid)"
  echo "[#] ip addr del $(ipcalc ${ip4space} -b | awk -F"[ ',]+" '/HostMin:/{print $2}')/$(ipcalc ${ip4space} -b | awk -F'= ' '/Netmask:/{print $2}') dev ${interface}"
  ip addr del $(ipcalc ${ip4space} -b | awk -F"[ ',]+" '/HostMin:/{print $2}')/$(ipcalc ${ip4space} -b | awk -F'= ' '/Netmask:/{print $2}') dev ${interface}

  exit 0
}

## START OF SCRIPT

if [ "$EUID" -ne 0 ]
  then echo "Please run as root"
  exit 1
fi

trap "cleanup" SIGINT SIGTERM

## getting options

vars=$(getopt --options i:vh46 --longoptions interface:,range4:,range6: --name 'adhoc-network' -- "$@")
if [ $? != 0 ] ; then exit 1 ; fi
eval set -- ${vars}

tmpfolder=$(head -c 8 /proc/sys/kernel/random/uuid)
mkdir "/tmp/${tmpfolder}"

print_usage() {
  printf "Usage: -i <interface> define the downstream interface"
}

four_flag='true'
six_flag='true'
interface=''
ip4space='192.168.138.0/24'
ip6space=''
verbose='false'

while true; do
  case "$1" in
    -4) six_flag='false'; shift ;;
    -6) four_flag='false'; shift ;;
    -i | --interface) interface="$2"; shift 2 ;;
    --range4) if four_flag==false; then echo "[!] --range4 set but ipv4 disabled!"; exit 1; fi; ip4space="$2"; shift 2 ;;
    --range6) if six_flag==false; then echo "[!] --range6 set but ipv6 disabled!"; exit 1; fi; ip6space="$2"; shift 2 ;;
    -v) verbose='true'; shift ;;
    -h | --help) print_usage exit 0 ;;
    * ) break ;;
  esac
done

if [ -z "$interface" ]; then echo '[!] Missing -i or --interface'; exit 1; fi

# check if interface is an existing interface
if ! ip link show ${interface} >/dev/null; then
    printf "Interface does not exist!"
    exit 1
fi

## begin of configuration

dnsmasqargs=''

if ${four_flag}; then
  # füge lokale ipv4 addressen hinzu
  echo "[#] ip addr add $(ipcalc ${ip4space} -b | awk -F"[ ',]+" '/HostMin:/{print $2}')/$(ipcalc ${ip4space} -b | awk -F'= ' '/Netmask:/{print $2}') dev ${interface}"
  ip addr add $(ipcalc ${ip4space} -b | awk -F"[ ',]+" '/HostMin:/{print $2}')/$(ipcalc ${ip4space} -b | awk -F'= ' '/Netmask:/{print $2}') dev ${interface}

  # configure dhcp
  dnsmasqargs="${dnsmasqargs} --dhcp-range=$(ipcalc ${ip4space} -b | awk -F"[ ',]+" '/HostMin:/{print $2}'),$(ipcalc ${ip4space} -b | awk -F"[ ',]+" '/HostMax:/{print $2}'),24h --dhcp-option=option:router,$(ipcalc ${ip4space} -b | awk -F"[ ',]+" '/HostMin:/{print $2}') --dhcp-option=option:dns-server,$(ipcalc ${ip4space} -b | awk -F"[ ',]+" '/HostMin:/{print $2}') --dhcp-option=option:netmask,$(ipcalc ${ip4space} -b | awk -F"[ ',]+" '/Netmask:/{print $2}')"
fi

if ${six_flag}; then
  if [ -z "${ip6range}"]; then
    #genula()

    # Convert from hex string representation to bytes before sha1sum
    # https://unix.stackexchange.com/a/82766
    eui64="$(cat /sys/class/net/${interface}/address | cut -c1-9)ff:fe$(cat /sys/class/net/${interface}/address | cut -c9-18)"
    eui64="${eui64//:}"
    globalid=$(echo -ne $(sed "s/../\\x&/g" <<< $(date)${eui64}) | sha1sum | cut -c18-32)
    ip6range="fd$(echo ${globalid} | cut -c1-2):$(echo ${globalid} | cut -c3-6):$(echo ${globalid} | cut -c7-10):$(echo ${globalid} | cut -c11-14)::/64"
    echo "[+] Generated ULA ${ip6range}"
  fi

  # füge lokale ipv6 addressen hinzu
  echo "[!] Pass v6 config. not implemented yet"
  # starte radvd
fi

# start dns
echo -e "#! /bin/bash\n\necho [+] \$1 \$2 \$3 >> /tmp/${tmpfolder}/dhcp.log" > /tmp/${tmpfolder}/dhcp-log.sh
chmod +x /tmp/${tmpfolder}/dhcp-log.sh
touch /tmp/${tmpfolder}/dhcp.log
dnsmasqargs="${dnsmasqargs} --port=53 --log-facility=/var/log/dnsmasq.log --dhcp-script=/tmp/${tmpfolder}/dhcp-log.sh --dhcp-leasefile=/tmp/${tmpfolder}/dhcp.leases"
echo "[#] dnsmasq ${dnsmasqargs}"
dnsmasq ${dnsmasqargs}

tail -f /tmp/${tmpfolder}/dhcp.log &
read

cleanup
